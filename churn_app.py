# -*- coding: utf-8 -*-
"""churn_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xfdCEjHbiHQmZQyBOjt4gkCOZ_dUd2ot
"""

import streamlit as st
import numpy as np
import pandas as pd
import joblib

# Load the saved model and encoders
model = joblib.load("lgbm_churn_model.pkl")
le_state = joblib.load("le_state.pkl")
le_area = joblib.load("le_area.pkl")

st.set_page_config(page_title="Customer Churn Prediction App", layout="centered")

st.title("üìû Telecom Customer Churn Prediction")
st.write("Enter customer details to predict whether they are likely to churn.")

# Input fields
account_length = st.slider("Account Length (in days)", 1, 300, 100)
voice_plan = st.selectbox("Voice Plan", ["yes", "no"])
voice_messages = st.slider("Voice Messages", 0, 100, 0)
intl_plan = st.selectbox("International Plan", ["yes", "no"])
intl_mins = st.slider("International Minutes", 0.0, 20.0, 5.0)
intl_calls = st.slider("International Calls", 0, 20, 3)
intl_charge = st.number_input("International Charge", value=1.5)
day_mins = st.slider("Day Minutes", 0.0, 400.0, 180.0)
day_calls = st.slider("Day Calls", 0, 200, 90)
day_charge = st.number_input("Day Charge", value=30.0)
eve_mins = st.slider("Evening Minutes", 0.0, 400.0, 180.0)
eve_calls = st.slider("Evening Calls", 0, 200, 90)
eve_charge = st.number_input("Evening Charge", value=20.0)
night_mins = st.slider("Night Minutes", 0.0, 400.0, 180.0)
night_calls = st.slider("Night Calls", 0, 200, 90)
night_charge = st.number_input("Night Charge", value=10.0)
customer_calls = st.slider("Customer Service Calls", 0, 15, 1)

# Categorical inputs
state_input = st.text_input("State (e.g., KS, OH)", "KS")
area_input = st.text_input("Area Code (e.g., 415, 408)", "415")

# Preprocessing
voice_plan = 1 if voice_plan == "yes" else 0
intl_plan = 1 if intl_plan == "yes" else 0

total_minutes = day_mins + eve_mins + night_mins + intl_mins
total_calls = day_calls + eve_calls + night_calls + intl_calls

# Encode state and area code
state_encoded = le_state.transform([state_input])[0] if state_input in le_state.classes_ else 0
area_encoded = le_area.transform([int(area_input)])[0] if int(area_input) in le_area.classes_ else 0

# Final input features
input_data = np.array([[
    account_length, voice_plan, voice_messages, intl_plan,
    intl_mins, intl_calls, intl_charge, day_mins, day_calls,
    day_charge, eve_mins, eve_calls, eve_charge, night_mins,
    night_calls, night_charge, customer_calls,
    total_minutes, total_calls, state_encoded, area_encoded
]])

# Prediction
if st.button("Predict Churn"):
    prediction = model.predict(input_data)[0]
    prob = model.predict_proba(input_data)[0][1]

    if prediction == 1:
        st.error(f"‚ö†Ô∏è The customer is likely to churn! (Probability: {prob:.2f})")
    else:
        st.success(f"‚úÖ The customer is unlikely to churn. (Probability: {prob:.2f})")